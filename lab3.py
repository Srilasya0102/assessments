# -*- coding: utf-8 -*-
"""lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jkZOsXI2XIMEvy3r40QQ0ixSTLRiMvSB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans

data=pd.read_csv("/content/seeds.csv")
df=pd.DataFrame(data)
df.isnull().sum()
df.fillna(df.mean(),inplace=True)
print(df.isnull().sum())
df.info()
df.describe()
df.duplicated().sum()
df.drop_duplicates()
plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(df)
z_scores=zscore(df)
outliers = np.abs(z_scores) > threshold
df = df[~outliers]
plt.figure(figsize=(10, 6))
sns.boxplot(df)
plt.show()

print(df.corr())
sns.heatmap(df.corr(),cmap="viridis",annot=True)
plt.show()

X = data[['Area', 'Perimeter', 'Compactness','Length of kernel','Width of kernel']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
kmeans = KMeans(n_clusters=5)
kmeans.fit(X_scaled)

# Add cluster labels to the original data
data['Cluster'] = kmeans.labels_

# Visualize the clusters
plt.scatter(data['Area'], data['Perimeter'], c=data['Cluster'], cmap='viridis', alpha=0.5)
plt.xlabel('Seed Parameters')
plt.ylabel('Qualities')
plt.title('Yeilding')
plt.show()
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='mean')
df = imputer.fit_transform(df)
wcss = []
k_values=range(1, 11)
for i in k_values:
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)

# Plot the elbow curve
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

#Plotting the Cluster
k=5
kmeans = KMeans(n_clusters=k)
kmeans.fit(X_scaled)

data['Cluster'] = kmeans.labels_

centroids = scaler.inverse_transform(kmeans.cluster_centers_)

plt.figure(figsize=(8, 6))

for cluster in range(k):
    cluster_data = data[data['Cluster'] == cluster]
    plt.scatter(cluster_data['Area'], cluster_data['Perimeter'],
                label=f'Cluster {cluster}', alpha=0.6)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='red', label='Centroids')

plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation with K-Means Clustering')
plt.legend()
plt.grid(True)
plt.show()